// Compiled shader for PC, Mac & Linux Standalone

//////////////////////////////////////////////////////////////////////////
// 
// NOTE: This is *not* a valid shader file, the contents are provided just
// for information and for debugging purposes only.
// 
//////////////////////////////////////////////////////////////////////////
// Skipping shader variants that would not be included into build of current scene.

Shader "Roystan/Toon/Water Tut" {
Properties {
 _DepthGradientShallow ("Depth Gradient Shallow", Color) = (0.325000,0.807000,0.971000,0.725000)
 _DepthGradientDeep ("Depth Gradient Deep", Color) = (0.086000,0.407000,1.000000,0.749000)
 _DepthMaxDistance ("Depth Maximum Distance", Float) = 1.000000
 _FoamColor ("Foam Color", Color) = (1.000000,1.000000,1.000000,1.000000)
 _SurfaceNoise ("Surface Noise", 2D) = "white" { }
 _SurfaceNoiseScroll ("Surface Noise Scroll Amount", Vector) = (0.030000,0.030000,0.000000,0.000000)
 _SurfaceNoiseCutoff ("Surface Noise Cutoff", Range(0.000000,1.000000)) = 0.777000
 _SurfaceDistortion ("Surface Distortion", 2D) = "white" { }
 _SurfaceDistortionAmount ("Surface Distortion Amount", Range(0.000000,1.000000)) = 0.270000
 _FoamMaxDistance ("Foam Maximum Distance", Float) = 0.400000
 _FoamMinDistance ("Foam Minimum Distance", Float) = 0.040000
}
SubShader { 
 Tags { "QUEUE"="Transparent" }


 // Stats for Vertex shader:
 //        d3d11: 31 math
 // Stats for Fragment shader:
 //        d3d11: 25 math, 4 texture
 Pass {
  Tags { "QUEUE"="Transparent" }
  ZWrite Off
  Blend SrcAlpha OneMinusSrcAlpha
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
No keywords set in this variant.
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 31 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "TexCoord"
Uses vertex data channel "Color"

Constant Buffer "$Globals" (144 bytes) on slot 0 {
  Vector4 _SurfaceNoise_ST at 32
  Vector4 _SurfaceDistortion_ST at 48
}
Constant Buffer "UnityPerCamera" (144 bytes) on slot 1 {
  Vector4 _ProjectionParams at 80
}
Constant Buffer "UnityPerDraw" (176 bytes) on slot 2 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 3 {
  Matrix4x4 unity_MatrixInvV at 208
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// NORMAL                   0   xyz         2     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// NORMAL                   0   xyz         3     NONE   float   xyz 
//
      vs_4_0
      dcl_constantbuffer CB0[4], immediateIndexed
      dcl_constantbuffer CB1[6], immediateIndexed
      dcl_constantbuffer CB2[8], immediateIndexed
      dcl_constantbuffer CB3[21], immediateIndexed
      dcl_input v0.xyz
      dcl_input v1.xy
      dcl_input v2.xyz
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xy
      dcl_output o1.zw
      dcl_output o2.xyzw
      dcl_output o3.xyz
      dcl_temps 2
   0: mul r0.xyzw, v0.yyyy, cb2[1].xyzw
   1: mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb2[2].xyzw, v0.zzzz, r0.xyzw
   3: add r0.xyzw, r0.xyzw, cb2[3].xyzw
   4: mul r1.xyzw, r0.yyyy, cb3[18].xyzw
   5: mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
   6: mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
   7: mad r0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
   8: mov o0.xyzw, r0.xyzw
   9: mad o1.zw, v1.xxxy, cb0[3].xxxy, cb0[3].zzzw
  10: mad o1.xy, v1.xyxx, cb0[2].xyxx, cb0[2].zwzz
  11: mul r0.y, r0.y, cb1[5].x
  12: mul r1.xzw, r0.xxwy, l(0.500000, 0.000000, 0.500000, 0.500000)
  13: mov o2.zw, r0.zzzw
  14: add o2.xy, r1.zzzz, r1.xwxx
  15: mul r0.xyz, cb2[5].xyzx, cb3[13].yyyy
  16: mad r0.xyz, cb2[4].xyzx, cb3[13].xxxx, r0.xyzx
  17: mad r0.xyz, cb2[6].xyzx, cb3[13].zzzz, r0.xyzx
  18: mad r0.xyz, cb2[7].xyzx, cb3[13].wwww, r0.xyzx
  19: dp3 r0.x, r0.xyzx, v2.xyzx
  20: mul r1.xyz, cb2[5].xyzx, cb3[14].yyyy
  21: mad r1.xyz, cb2[4].xyzx, cb3[14].xxxx, r1.xyzx
  22: mad r1.xyz, cb2[6].xyzx, cb3[14].zzzz, r1.xyzx
  23: mad r1.xyz, cb2[7].xyzx, cb3[14].wwww, r1.xyzx
  24: dp3 r0.y, r1.xyzx, v2.xyzx
  25: mul r1.xyz, cb2[5].xyzx, cb3[15].yyyy
  26: mad r1.xyz, cb2[4].xyzx, cb3[15].xxxx, r1.xyzx
  27: mad r1.xyz, cb2[6].xyzx, cb3[15].zzzz, r1.xyzx
  28: mad r1.xyz, cb2[7].xyzx, cb3[15].wwww, r1.xyzx
  29: dp3 r0.z, r1.xyzx, v2.xyzx
  30: dp3 r0.w, r0.xyzx, r0.xyzx
  31: rsq r0.w, r0.w
  32: mul o3.xyz, r0.wwww, r0.xyzx
  33: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
// Stats: 25 math, 3 temp registers, 4 textures
Set 2D Texture "_CameraDepthTexture" to slot 0 sampler slot 2
Set 2D Texture "_CameraNormalsTexture" to slot 1 sampler slot 3
Set 2D Texture "_SurfaceDistortion" to slot 2 sampler slot 1
Set 2D Texture "_SurfaceNoise" to slot 3 sampler slot 0

Constant Buffer "$Globals" (144 bytes) on slot 0 {
  Vector4 _DepthGradientShallow at 64
  Vector4 _DepthGradientDeep at 80
  Vector4 _FoamColor at 96
  Float _DepthMaxDistance at 112
  Float _FoamMaxDistance at 116
  Float _FoamMinDistance at 120
  Float _SurfaceNoiseCutoff at 124
  Float _SurfaceDistortionAmount at 128
  Vector2 _SurfaceNoiseScroll at 132
}
Constant Buffer "UnityPerCamera" (144 bytes) on slot 1 {
  Vector4 _Time at 0
  Vector4 _ZBufferParams at 112
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyzw        2     NONE   float   xy w
// NORMAL                   0   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[9], immediateIndexed
      dcl_constantbuffer CB1[8], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_sampler s2, mode_default
      dcl_sampler s3, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture2d (float,float,float,float) t1
      dcl_resource_texture2d (float,float,float,float) t2
      dcl_resource_texture2d (float,float,float,float) t3
      dcl_input_ps linear v1.xy
      dcl_input_ps linear v1.zw
      dcl_input_ps linear v2.xyw
      dcl_input_ps linear v3.xyz
      dcl_output o0.xyzw
      dcl_temps 3
   0: sample r0.xyzw, v1.zwzz, t2.xyzw, s1
   1: mad r0.xy, r0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
   2: mad r0.zw, cb1[0].yyyy, cb0[8].yyyz, v1.xxxy
   3: mad r0.xy, r0.xyxx, cb0[8].xxxx, r0.zwzz
   4: sample r0.xyzw, r0.xyxx, t3.xyzw, s0
   5: div r0.yz, v2.xxyx, v2.wwww
   6: sample r1.xyzw, r0.yzyy, t1.xyzw, s3
   7: sample r2.xyzw, r0.yzyy, t0.xyzw, s2
   8: mad r0.y, cb1[7].z, r2.x, cb1[7].w
   9: div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
  10: add r0.y, r0.y, -v2.w
  11: dp3_sat r0.z, r1.xyzx, v3.xyzx
  12: add r0.w, -cb0[7].y, cb0[7].z
  13: mad r0.z, r0.z, r0.w, cb0[7].y
  14: div_sat r0.z, r0.y, r0.z
  15: div_sat r0.y, r0.y, cb0[7].x
  16: mad r0.z, r0.z, cb0[7].w, l(-0.010000)
  17: add r0.x, -r0.z, r0.x
  18: mul_sat r0.x, r0.x, l(50.000000)
  19: mad r0.z, r0.x, l(-2.000000), l(3.000000)
  20: mul r0.x, r0.x, r0.x
  21: mul r0.x, r0.x, r0.z
  22: mad r0.z, -cb0[6].w, r0.x, l(1.000000)
  23: add r1.xyzw, -cb0[4].xyzw, cb0[5].xyzw
  24: mad r1.xyzw, r0.yyyy, r1.xyzw, cb0[4].xyzw
  25: mul r1.xyzw, r0.zzzz, r1.xyzw
  26: mul r0.y, r0.x, cb0[6].w
  27: mad o0.w, cb0[6].w, r0.x, r1.w
  28: mad o0.xyz, cb0[6].xyzx, r0.yyyy, r1.xyzx
  29: ret 
// Approximately 0 instruction slots used


 }
}
}